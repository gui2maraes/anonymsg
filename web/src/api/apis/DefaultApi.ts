/* tslint:disable */
/* eslint-disable */
/**
 * BlindChannel REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Message,
  PublicJwk,
  PublishMessage,
  RegisterRequest,
} from '../models/index';
import {
    MessageFromJSON,
    MessageToJSON,
    PublicJwkFromJSON,
    PublicJwkToJSON,
    PublishMessageFromJSON,
    PublishMessageToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
} from '../models/index';

export interface ApiMessagesGetRequest {
    recipient: string;
    limit?: number;
}

export interface ApiPublishPostRequest {
    publishMessage?: PublishMessage;
}

export interface ApiRegisterPostRequest {
    registerRequest?: RegisterRequest;
}

export interface ApiRegistryAliasGetRequest {
    alias: string;
}

export interface ApiSearchAliasGetRequest {
    alias: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns a list of messages addressed to a given recipient
     */
    async apiMessagesGetRaw(requestParameters: ApiMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Message>>> {
        if (requestParameters['recipient'] == null) {
            throw new runtime.RequiredError(
                'recipient',
                'Required parameter "recipient" was null or undefined when calling apiMessagesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['recipient'] != null) {
            queryParameters['recipient'] = requestParameters['recipient'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MessageFromJSON));
    }

    /**
     * Returns a list of messages addressed to a given recipient
     */
    async apiMessagesGet(requestParameters: ApiMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Message>> {
        const response = await this.apiMessagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publishes a message with a recipient
     */
    async apiPublishPostRaw(requestParameters: ApiPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/publish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublishMessageToJSON(requestParameters['publishMessage']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Publishes a message with a recipient
     */
    async apiPublishPost(requestParameters: ApiPublishPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPublishPostRaw(requestParameters, initOverrides);
    }

    /**
     * Registers a name and key pair
     */
    async apiRegisterPostRaw(requestParameters: ApiRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Registers a name and key pair
     */
    async apiRegisterPost(requestParameters: ApiRegisterPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRegisterPostRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of similar aliases, ordered by similarity
     */
    async apiRegistryAliasGetRaw(requestParameters: ApiRegistryAliasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling apiRegistryAliasGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/registry/{alias}`.replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a list of similar aliases, ordered by similarity
     */
    async apiRegistryAliasGet(requestParameters: ApiRegistryAliasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.apiRegistryAliasGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the key associated with a given alias
     */
    async apiSearchAliasGetRaw(requestParameters: ApiSearchAliasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicJwk>> {
        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling apiSearchAliasGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/search/{alias}`.replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicJwkFromJSON(jsonValue));
    }

    /**
     * Returns the key associated with a given alias
     */
    async apiSearchAliasGet(requestParameters: ApiSearchAliasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicJwk> {
        const response = await this.apiSearchAliasGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
